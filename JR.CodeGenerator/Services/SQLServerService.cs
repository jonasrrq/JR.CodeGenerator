using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text;
using System.Text.Json;

using JR.CodeGenerator.Extensions;
using JR.CodeGenerator.Models;

/// <summary>
/// 
/// </summary>
/// <autogeneratedoc />
namespace JR.CodeGenerator.Services;

/// <summary>
/// SQL Server Service
/// </summary>
/// <seealso cref="JR.CodeGenerator.Services.ISQLServerService" />
public class SQLServerService : ISQLServerService
{
    /// <summary>
    /// The data connection
    /// </summary>
    public DataConnection _dataConnection;
    public DataGeneral _dataGeneral;
    /// <summary>
    /// Gets the connection string.
    /// </summary>
    /// <returns></returns>
    private string GetConnectionString
    {
        get
        {
            string conexionString = $"Data Source={_dataConnection.ServerName};Initial Catalog={_dataConnection.DataBase};TrustServerCertificate=True;";

            if (_dataConnection.IsIntegrateSecurity)
                conexionString += "Integrated Security=True;";
            else
                conexionString += $"User ID={_dataConnection.UserName}; Password={_dataConnection.Password};";

            return conexionString;
        }
    }


    /// <summary>
    /// Gets the data basese2 async.
    /// </summary>
    /// <param name="dataConnection">The data connection.</param>
    /// <returns>
    /// A Task.
    /// </returns>
    public async Task<List<DataBase>> GetDataBaseseAsync(DataConnection dataConnection)
    {
        _dataConnection = dataConnection;

        return await GetDataBases();
    }

    /// <summary>
    /// Gets the datbles vistas.
    /// </summary>
    /// <param name="treeViewDataBases">The tree view data bases.</param>
    /// <autogeneratedoc />
    public async Task<List<TableView>> GetDatblesVistasAsync(DataConnection dataConnection)
    {
        _dataConnection = dataConnection;

        List<TableView> list = new List<TableView>()
        {
           new TableView(){Name = "Tablas", ImageUri = "/Images/folder.png"},
           new TableView(){Name = "Vistas", ImageUri = "/Images/folder.png"}
        };

        using (var db = new SqlConnection(GetConnectionString))
        {
            await db.OpenAsync();
            var dataTables = await db.GetSchemaAsync("Tables");

            foreach (DataRow dataTable in dataTables.Rows)
            {
                if (dataTable["TABLE_NAME"].ToString() == "sysdiagrams")
                    continue;

                string squema = "Tablas";
                string imageUri = "/Images/table.png";
                if (dataTable["TABLE_TYPE"].ToString() == "VIEW")
                {
                    squema = "Vistas";
                    imageUri = "/Images/view.png";
                }

                TableView children = new TableView()
                {
                    Schema = dataTable["TABLE_SCHEMA"].ToString(),
                    Name = dataTable["TABLE_NAME"].ToString(),
                    ImageUri = imageUri,
                };

                list.Where(x => x.Name == squema).First().Children.Add(children);
            }
        }

        var list2 = new List<TableView>();

        foreach (var item in list)
        {
            list2.Add(new TableView()
            {
                Name = item.Name,
                ImageUri = item.ImageUri,
                Schema = item.Schema,
                Children = item.Children.OrderBy(x => x.Schema).OrderBy(x => x.Name).ToList()
            });
        }

        return list2;
    }

    /// <summary>
    /// Generates the code.
    /// </summary>
    /// <param name="dataConnection">The data connection.</param>
    /// <param name="dataGeneral">The data general.</param>
    /// <autogeneratedoc />
    public async Task GenerateCode(DataConnection conct, DataGeneral general)
    {
        _dataConnection = conct;
        _dataGeneral = general;

        bool isTabla = (_dataGeneral.TableVista == "Tablas");

        var createClass = new ClaseMetodos(GetConnectionString);
        string _tableNameClass = general.ToTitleCase ? general.TableName.ToLower().ToTitleCase() : general.TableName.UpperFirstChar();



        string queryCampoosTabla = await ReadFile("InfoCamposTablas.txt");
        queryCampoosTabla = queryCampoosTabla.Replace("$TableName$", _tableNameClass)
                                             .Replace("$SchemaName$", general.SchemaName);

        string camposClessTemp = await createClass.GetFields(queryCampoosTabla, general.ToTitleCase);

        string entityTemp = await ReadFile("ClaseEntidad.txt");
        entityTemp = entityTemp.Replace("$TablaVista$", general.TableVista)
                               .Replace("$TableName$", _tableNameClass)
                               .Replace("$EspacioNombre$", general.NameSpace);
        entityTemp = entityTemp.Replace("#Propiedades#", camposClessTemp)
                               .Replace("#Empresa#", general.Empresa)
                               .Replace("#Autor#", general.Autor)
                               .Replace("#Fecha#", DateTime.Now.ToString("dd/MM/yyyy"));

        string sufijoNemeFile = await BuscarNombreClase("$TableName$", "ClaseEntidad.txt");
        string pathCless = System.IO.Path.Combine(general.FullPath, _tableNameClass + sufijoNemeFile + ".cs");
        await WriteFile(pathCless, entityTemp);



        entityTemp = entityTemp.Replace("BackEnd.Data", "Shared.Dto.ViewModels");
        entityTemp = entityTemp.Replace(_tableNameClass, $"{_tableNameClass}DTO");
        pathCless = System.IO.Path.Combine(general.FullPath, _tableNameClass + sufijoNemeFile + "DTO.cs");
        await WriteFile(pathCless, entityTemp);



        if (_dataGeneral.TableVista == "Tablas" && _dataGeneral.IsCreateTrigger)
        {
            _dataGeneral.TableVista = "Scripts";

            pathCless = System.IO.Path.Combine(general.FullPath, "ScriptTableAudit.sql");
            if (!File.Exists(pathCless))
            {
                entityTemp = await ReadFile("ScriptTableAudit.txt");
                entityTemp = entityTemp.Replace("$DataBaseName$", _dataConnection.DataBase);
                await WriteFile(pathCless, entityTemp);
            }

            entityTemp = await ReadFile("ScriptTriggersAudit.txt");
            entityTemp = entityTemp.Replace("$DataBaseName$", _dataConnection.DataBase)
                                   .Replace("$TableName$", _tableNameClass)
                                   .Replace("$Schema$", _dataGeneral.SchemaName)
                                   .Replace("$DataBaseName$", _dataConnection.DataBase);

            string _fileNameScript = _dataGeneral.IsOneFileScript ? "ScriptTriggersAudit.sql" : $"ScriptTriggersAudit_{_tableNameClass}.sql";

            pathCless = System.IO.Path.Combine(general.FullPath, _fileNameScript);
            await WriteFile(pathCless, entityTemp);
        }

        //Validaciones
        _dataGeneral.TableVista = "Validate";
        entityTemp = await ReadFile("ClaseValidate.txt");
        entityTemp = entityTemp.Replace("$EspacioNombre$", general.NameSpace)
                                .Replace("$TableName$", _tableNameClass);

        camposClessTemp = await createClass.GetValidations(queryCampoosTabla, general.ToTitleCase);
        entityTemp = entityTemp.Replace("$Validations$", camposClessTemp);

        sufijoNemeFile = await BuscarNombreClase("$TableName$", "ClaseValidate.txt");
        pathCless = System.IO.Path.Combine(general.FullPath, $"{_tableNameClass}{sufijoNemeFile}.cs");
        await WriteFile(pathCless, entityTemp);

        if (_dataGeneral.IsDapper)
        {
            _dataGeneral.TableVista = "Services";


            entityTemp = isTabla ? await ReadFile("DapperServiceEntities.txt") : await ReadFile("DapperServiceCustmerRepositoryEntities.txt");
            entityTemp = entityTemp.Replace("$EspacioNombre$", general.NameSpace)
                                   .Replace("$TableName$", _tableNameClass);

            if (isTabla)
            {
                camposClessTemp = await createClass.GetFieldsInsert(queryCampoosTabla, general.ToTitleCase);
                entityTemp = entityTemp.Replace("$FieldssInsert$", camposClessTemp);


                camposClessTemp = await createClass.GetFieldsUpdate(queryCampoosTabla, general.ToTitleCase);
                entityTemp = entityTemp.Replace("$FieldsUpdate$", camposClessTemp);


                camposClessTemp = await createClass.GetFieldsPrimaryKey(queryCampoosTabla);
                entityTemp = entityTemp.Replace("$Clave_Primaria$", camposClessTemp);
            }

            sufijoNemeFile = isTabla ? await BuscarNombreClase("$TableName$", "DapperServiceEntities.txt") :
                                       await BuscarNombreClase("$TableName$", "DapperServiceCustmerRepositoryEntities.txt");

            pathCless = System.IO.Path.Combine(general.FullPath, $"{_tableNameClass}{sufijoNemeFile}.cs");

            await WriteFile(pathCless, entityTemp);



            // IServicesClient
            _dataGeneral.TableVista = "IServicesClient";
            entityTemp = await ReadFile("IServicesClient.txt");
            entityTemp = entityTemp.Replace("$TableName$", _tableNameClass);
            pathCless = System.IO.Path.Combine(general.FullPath, $"I{_tableNameClass}ServicesClient.cs");
            await WriteFile(pathCless, entityTemp);


            // ServicesClient
            _dataGeneral.TableVista = "ServicesClient";
            entityTemp = await ReadFile("ServicesClient.txt");
            entityTemp = entityTemp.Replace("$TableName$", _tableNameClass);
            pathCless = System.IO.Path.Combine(general.FullPath, $"{_tableNameClass}ServicesClient.cs");
            await WriteFile(pathCless, entityTemp);

            // Controllers
            _dataGeneral.TableVista = "Controllers";
            entityTemp = await ReadFile("Controller.txt");
            entityTemp = entityTemp.Replace("$TableName$", _tableNameClass);
            pathCless = System.IO.Path.Combine(general.FullPath, $"{_tableNameClass}Controllers.cs");
            await WriteFile(pathCless, entityTemp);

            // ServicesClientFromEnd
            _dataGeneral.TableVista = "ServicesClientFromEnd";
            entityTemp = await ReadFile("ServicesFromEnd.txt");
            entityTemp = entityTemp.Replace("$TableName$", _tableNameClass);
            pathCless = System.IO.Path.Combine(general.FullPath, $"{_tableNameClass}Service.cs");
            await WriteFile(pathCless, entityTemp);
        }


    }

    /// <summary>
    /// Generates the code base.
    /// </summary>
    /// <param name="general">The general.</param>
    public async Task GenerateCodeBase(DataGeneral general)
    {
        string _templete = string.Empty;
        string _pathCless = string.Empty;
        _dataGeneral = general;

        if (_dataGeneral.IsDapper)
        {
            _dataGeneral.TableVista = "Repositories";
            _templete = await ReadFile("DapperRepositoryBase.txt");
            _templete = _templete.Replace("$EspacioNombre$", general.NameSpace);
            _pathCless = System.IO.Path.Combine(general.FullPath, "RepositoryBase.cs");
            await WriteFile(_pathCless, _templete);

            _templete = await ReadFile("DapperRepository.txt");
            _templete = _templete.Replace("$EspacioNombre$", general.NameSpace);
            _pathCless = System.IO.Path.Combine(general.FullPath, "Repository.cs");
            await WriteFile(_pathCless, _templete);


            _templete = await ReadFile("DapperRepositoryCustomer.txt");
            _templete = _templete.Replace("$EspacioNombre$", general.NameSpace);
            _pathCless = System.IO.Path.Combine(general.FullPath, "RepositoryCustomer.cs");
            await WriteFile(_pathCless, _templete);
        }
        else
        {
            _dataGeneral.TableVista = "";
            _templete = await ReadFile("ExtensionsDataTable.txt");
            _templete = _templete.Replace("$EspacioNombre$", general.NameSpace);
            _pathCless = System.IO.Path.Combine(general.FullPath, "ExtensionsDataTable.cs");
            await WriteFile(_pathCless, _templete);
        }

        _dataGeneral.TableVista = "";
        _templete = await ReadFile("ExtensionsConvert.txt");
        _templete = _templete.Replace("$EspacioNombre$", general.NameSpace);
        _pathCless = System.IO.Path.Combine(general.FullPath, "ExtensionsConvert.cs");
        await WriteFile(_pathCless, _templete);


        _templete = await ReadFile("ErrorValidations.txt");
        _templete = _templete.Replace("$EspacioNombre$", general.NameSpace);
        _pathCless = System.IO.Path.Combine(general.FullPath, "ErrorValidations.cs");
        await WriteFile(_pathCless, _templete);

        _templete = await ReadFile("Error.txt");
        _templete = _templete.Replace("$EspacioNombre$", general.NameSpace);
        _pathCless = System.IO.Path.Combine(general.FullPath, "Error.cs");
        await WriteFile(_pathCless, _templete);

    }


    /// <summary>
    /// Geras the entidad.
    /// </summary>
    /// <param name="setting">The setting.</param>
    public async Task SetSetting(Setting setting)
    {
        string path = Path.Combine(Environment.CurrentDirectory, "Setting.json");

        string settingJson = JsonSerializer.Serialize(setting);

        await WriteFile(path, settingJson);
    }

    /// <summary>
    /// Gets the setting.
    /// </summary>
    /// <returns></returns>
    public async Task<Setting> GetSetting()
    {
        string fileName = "Setting.json";

        string settingJson = await ReadFile(fileName, "");

        return string.IsNullOrWhiteSpace(settingJson) ? null : JsonSerializer.Deserialize<Setting>(settingJson);

    }

    /// <summary>
    /// Gets the data bases2.
    /// </summary>
    /// <returns></returns>
    private async Task<List<DataBase>> GetDataBases()
    {
        List<DataBase> list = new List<DataBase>();
        list.Add(new DataBase(0, "--Base de Datos--"));
        using (var db = new SqlConnection(GetConnectionString))
        {
            await db.OpenAsync();
            var dataBases = await db.GetSchemaAsync("DataBases");

            foreach (DataRow dataBase in dataBases.Rows)
            {
                if ((Int16)dataBase["dbid"] > 4)
                {
                    list.Add(new DataBase((Int16)dataBase["dbid"], dataBase["database_name"].ToString()));
                }
            }
        }

        return list.OrderBy(x => x.Name).ToList();
    }


    /// <summary>
    /// Reads the file.
    /// </summary>
    /// <param name="file">The file.</param>
    /// <returns></returns>
    /// <autogeneratedoc />
    private async Task<string> ReadFile(string file, string folder = "Template")
    {
        string result = string.Empty;
        string path = System.IO.Path.Combine(Environment.CurrentDirectory, folder, file);
        try
        {
            result = await File.ReadAllTextAsync(path, Encoding.UTF8);
        }
        catch (Exception)
        { }

        return result;
    }

    /// <summary>
    /// Writes the file.
    /// </summary>
    /// <param name="pathDocuName">Name of the path docu.</param>
    /// <param name="document">The document.</param>
    /// <autogeneratedoc />
    private async Task WriteFile(string pathDocuName, string document)
    {
        if (!Directory.Exists(_dataGeneral.FullPath))
            Directory.CreateDirectory(_dataGeneral.FullPath);
        if (_dataGeneral.IsOneFileScript && _dataGeneral.TableVista == "Scripts")
            await File.AppendAllTextAsync(pathDocuName, document, Encoding.UTF8);
        else
            await File.WriteAllTextAsync(pathDocuName, document, Encoding.UTF8);

    }

    /// <summary>
    /// Buscars the nombre clase.
    /// </summary>
    /// <param name="palabraClave">The palabra clave.</param>
    /// <param name="file">The file.</param>
    /// <param name="folder">The folder.</param>
    /// <returns></returns>
    private async Task<string> BuscarNombreClase(string palabraClave, string file, string folder = "Template")
    {
        string result = string.Empty;
        string path = System.IO.Path.Combine(Environment.CurrentDirectory, folder, file);
        try
        {
            var resultLines = await File.ReadAllLinesAsync(path, Encoding.UTF8);

            foreach (var item in resultLines)
            {
                if (item.Contains("public"))
                {
                    var resulItem = item.Split(' ');

                    foreach (var item2 in resulItem)
                    {
                        if (item2.Contains(palabraClave))
                            return item2.Replace(palabraClave, "");
                    }
                }


            }
        }
        catch (Exception)
        { }

        return result;

    }


}


