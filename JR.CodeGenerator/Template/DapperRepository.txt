using Dapper;

using System.Data;
using System.Data.SqlClient;
using System.Linq.Expressions;

// NOTA: Debe tenet instalado el NuGet Dapper Version: 2.0.123 ó superior
// NOTA: Debe tenet instalado el NuGet System.Data.SqlClient Version: 4.8.3 ó superior
// NOTA: Debe tener instalado el NuGet ExpressionExtensionSQL Version: 1.2.7 ó Superior
namespace $EspacioNombre$.Repository;

/// <summary>
/// Base Repository
/// </summary>
/// <typeparam name="T"></typeparam>
/// <autogeneratedoc />
public abstract class BaseRepository<T> : Base<T> where T : class
{
    protected readonly SqlConnection _Conexion;
    protected readonly IDbTransaction _SqlTransaction;
    private readonly string _UserNameAudit = string.Empty;
    protected string TableName = typeof(T).Name;
    protected string QuerySelectAll = $"Select * From {typeof(T).Name}";
    protected string QuerySelectByID;
    protected string NoQueryInsert;
    protected string NoQueryUpdate;
    protected string NoQueryDelete;

    /// <summary>
    /// Initializes a new instance of the <see cref="BaseRepository{T}" /> class.
    /// </summary>
    /// <param name="conexion">The conexion.</param>
    /// <param name="userNameAudit">The user name auditoria</param>
    /// <param name="sqlTransaction">The SQL transaction.</param>
    public BaseRepository(SqlConnection conexion,
                          string userNameAudit = null,
                          IDbTransaction sqlTransaction = null)
    {
        _Conexion = conexion;
        _SqlTransaction = sqlTransaction;

        if (userNameAudit != null)
            _UserNameAudit = @$"DECLARE @Ctx varbinary(128);
	                                SELECT @Ctx = CONVERT(varbinary(128), CONVERT(VarChar(128),'{userNameAudit}'));
	                                SET CONTEXT_INFO @Ctx;";
    }

    /// <summary>
    /// Selects all.
    /// </summary>
    /// <returns></returns>
    /// <autogeneratedoc />
    public IEnumerable<T> SelectAll(CommandType commandType = CommandType.Text)
    {
        return _Conexion.Query<T>(QuerySelectAll, transaction: _SqlTransaction, commandType: commandType);
    }

    /// <summary>
    /// Selects all asynchronous.
    /// </summary>
    /// <returns></returns>
    public async Task<IEnumerable<T>> SelectAllAsync(CommandType commandType = CommandType.Text)
    {
        return await _Conexion.QueryAsync<T>(QuerySelectAll, transaction: _SqlTransaction, commandType: commandType);
    }

    /// <summary>
    /// Selects the by identifier asynchronous.
    /// </summary>
    /// <returns></returns>
    /// <autogeneratedoc />
    public IEnumerable<T> SelectByExpression(Expression<Func<T, bool>> where, CommandType commandType = CommandType.Text)
    {
        if (where == null)
            throw new ArgumentNullException(nameof(where));

        var whereSql = GetWhere(where, QuerySelectAll);

        return _Conexion.Query<T>(whereSql.Key, whereSql.Value, _SqlTransaction, commandType: commandType);
    }

    /// <summary>
    /// Selects the by expression asynchronous.
    /// </summary>
    /// <param name="where">The where.</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">where</exception>
    public async Task<IEnumerable<T>> SelectByExpressionAsync(Expression<Func<T, bool>> where, CommandType commandType = CommandType.Text)
    {
        if (where == null)
            throw new ArgumentNullException(nameof(where));

        var whereSql = GetWhere(where, QuerySelectAll);

        return await _Conexion.QueryAsync<T>(whereSql.Key, whereSql.Value, _SqlTransaction, commandType: commandType);
    }


    /// <summary>
    /// Selects the by query first expression.
    /// </summary>
    /// <param name="where">The where.</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">where</exception>
    /// <autogeneratedoc />
    public T SelectByQueryFirstExpression(Expression<Func<T, bool>> where, CommandType commandType = CommandType.Text)
    {
        if (where == null)
            throw new ArgumentNullException(nameof(where));

        var whereSql = GetWhere(where, QuerySelectAll);

        return _Conexion.QueryFirst<T>(whereSql.Key, whereSql.Value, _SqlTransaction, commandType: commandType);
    }

    /// <summary>
    /// Selects the by query first expression asynchronous.
    /// </summary>
    /// <param name="where">The where.</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">where</exception>
    public async Task<T> SelectByQueryFirstExpressionAsync(Expression<Func<T, bool>> where, CommandType commandType = CommandType.Text)
    {
        if (where == null)
            throw new ArgumentNullException(nameof(where));

        var whereSql = GetWhere(where, QuerySelectAll);

        return await _Conexion.QueryFirstAsync<T>(whereSql.Key, whereSql.Value, _SqlTransaction, commandType: commandType);
    }

    /// <summary>
    /// Selects the by identifier.
    /// </summary>
    /// <param name="id">The identifier.</param>
    /// <returns></returns>
    /// <autogeneratedoc />
    public T SelectById(int Id, CommandType commandType = CommandType.Text)
    {
        return _Conexion.QueryFirst<T>(QuerySelectByID, new { Id = Id }, _SqlTransaction, commandType: commandType);
    }

    /// <summary>
    /// Selects the by identifier asynchronous.
    /// </summary>
    /// <param name="id">The identifier.</param>
    /// <returns></returns>
    public async Task<T> SelectByIdAsync(int Id, CommandType commandType = CommandType.Text)
    {
        return await _Conexion.QueryFirstAsync<T>(QuerySelectByID, new { Id = Id }, _SqlTransaction, commandType: commandType);
    }

    /// <summary>
    /// Inserts the specified entity.
    /// </summary>
    /// <param name="entity">The entity.</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">_UserNameAudit</exception>
    /// <exception cref="System.NotImplementedException"></exception>
    public int Insert(T entity, CommandType commandType = CommandType.Text)
    {
        if (string.IsNullOrWhiteSpace(_UserNameAudit))
            throw new ArgumentNullException("Debe pasar userNameAudit en el contructor");

        int Id = 0;
        var parameters = new DynamicParameters(entity);

        parameters.Add("Id_OutPut", Id, dbType: DbType.Int32, direction: ParameterDirection.Output);

        string _insert = @$"{_UserNameAudit}
                                {NoQueryInsert};
                                Set @Id_OutPut = SCOPE_IDENTITY();";

        _Conexion.Execute(_insert, parameters, _SqlTransaction, commandType: commandType);
        Id = parameters.Get<int>("Id_OutPut");
        return Id;
    }

    /// <summary>
    /// Inserts the asynchronous.
    /// </summary>
    /// <param name="entity">The entity.</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">_UserNameAudit</exception>
    public async Task<int> InsertAsync(T entity, CommandType commandType = CommandType.Text)
    {
        if (string.IsNullOrWhiteSpace(_UserNameAudit))
            throw new ArgumentNullException("Debe pasar userNameAudit en el contructor");

        int Id = 0;
        var parameters = new DynamicParameters(entity);

        parameters.Add("Id_OutPut", Id, dbType: DbType.Int32, direction: ParameterDirection.Output);

        string _insert = @$"{_UserNameAudit}
                                {NoQueryInsert};
                                Set @Id_OutPut = SCOPE_IDENTITY();";

        await _Conexion.ExecuteAsync(_insert, parameters, _SqlTransaction, commandType: commandType);
        Id = parameters.Get<int>("Id_OutPut");
        return Id;
    }

    /// <summary>
    /// Updates the specified entity.
    /// </summary>
    /// <param name="entity">The entity.</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">_UserNameAudit</exception>
    /// <exception cref="System.NotImplementedException"></exception>
    public bool Update(T entity, CommandType commandType = CommandType.Text)
    {
        if (string.IsNullOrWhiteSpace(_UserNameAudit))
            throw new ArgumentNullException("Debe pasar userNameAudit en el contructor");

        string _update = @$"{_UserNameAudit}
                                {NoQueryUpdate};";
        int Id = _Conexion.Execute(_update, entity, _SqlTransaction, commandType: commandType);
        return Id == 0 ? false : true;
    }

    /// <summary>
    /// Updates the asynchronous.
    /// </summary>
    /// <param name="entity">The entity.</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">_UserNameAudit</exception>
    public async Task<bool> UpdateAsync(T entity, CommandType commandType = CommandType.Text)
    {
        if (string.IsNullOrWhiteSpace(_UserNameAudit))
            throw new ArgumentNullException("Debe pasar userNameAudit en el contructor");

        string _update = @$"{_UserNameAudit}
                                {NoQueryUpdate};";
        int Id = await _Conexion.ExecuteAsync(_update, entity, _SqlTransaction, commandType: commandType);
        return Id == 0 ? false : true;
    }

    /// <summary>
    /// Deletes the specified identifier.
    /// </summary>
    /// <param name="Id">The identifier.</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">_UserNameAudit</exception>
    public bool Delete(int Id, CommandType commandType = CommandType.Text)
    {
        if (string.IsNullOrWhiteSpace(_UserNameAudit))
            throw new ArgumentNullException("Debe pasar userNameAudit en el contructor");

        string _delete = @$"{_UserNameAudit}
                                {NoQueryDelete};";
        int _Id = _Conexion.Execute(_delete, new { Id = Id }, commandType: commandType);
        return _Id != 0;
    }

    /// <summary>
    /// Deletes the asynchronous.
    /// </summary>
    /// <param name="Id">The identifier.</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">_UserNameAudit</exception>
    public async Task<bool> DeleteAsync(int Id, CommandType commandType = CommandType.Text)
    {
        if (string.IsNullOrWhiteSpace(_UserNameAudit))
            throw new ArgumentNullException("Debe pasar userNameAudit en el contructor");

        string _delete = @$"{_UserNameAudit}
                                {NoQueryDelete};";
        int _Id = await _Conexion.ExecuteAsync(_delete, new { Id = Id }, commandType: commandType);
        return _Id != 0;
    }
}